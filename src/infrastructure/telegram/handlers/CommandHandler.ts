import { UserRepository } from 'src/infrastructure/persistence/postgres/UserRepository';
import { MentalHealthApplication } from '../../../application/MentalHealthApplication';
import { ConversationState } from '@prisma/client';
import { scoped, Lifecycle, injectable, autoInjectable } from 'tsyringe';

/**
 * Handler for command messages received from Telegram
 * Processes command messages starting with / and routes them appropriately
 */

@scoped(Lifecycle.ContainerScoped)
@injectable()
@autoInjectable()
export class CommandHandler {
  // Available bot commands
  private readonly availableCommands = [
    'start',
    'help',
    'info',
    'cancel',
    'feedback',
    'resources',
    'buy',
    'getExtraCreditsForCoolGuys',
  ];

  /**
   * Creates a new command handler
   * @param application - Core application instance
   */
  constructor(
    private readonly application: MentalHealthApplication,
    private readonly userRepository: UserRepository,
  ) {}

  /**
   * Handles a command message from a user
   * @param userId - The Telegram user ID
   * @param command - The command name (without /)
   * @returns Promise<string> - Response message to send to the user
   */
  async handleCommand(userId: string, command: string): Promise<string> {
    try {
      // Check if command is valid
      if (!this.availableCommands.includes(command)) {
        return `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /${command}. –ù–∞–ø–∏—à–∏—Ç–µ /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.`;
      }

      console.log(`Processing command /${command} from user ${userId}`);

      // Route to appropriate command handler
      switch (command) {
        case 'start':
          return await this.handleStartCommand(userId);

        case 'help':
          return await this.handleHelpCommand();

        case 'info':
          return await this.handleInfoCommand(userId);

        case 'cancel':
          return await this.handleCancelCommand(userId);

        case 'getExtraCreditsForCoolGuys':
          return await this.getExtraCreditsForCoolGuys(userId);

        default:
          return `–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ /${command} –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.`;
      }
    } catch (error) {
      console.error(`Error processing command /${command} from user ${userId}:`, error);
      return `–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /${command}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`;
    }
  }

  /**
   * Handles the /getExtraCreditsForCoolGuys command
   * @param userId - The Telegram user ID
   * @returns Promise<string> - Confirmation message
   */
  private async getExtraCreditsForCoolGuys(userId: string): Promise<string> {
    try {
      // Add extra credits to user's account
      await this.userRepository.incrementBalance(userId, 1);
      return '–í—ã –ø–æ–ª—É—á–∏–ª–∏ 1 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç! üéâ';
    } catch (error) {
      console.error(`Error adding extra credits for ${userId}:`, error);
      return '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
  }

  /**
   * Handles the /start command
   * @param userId - The Telegram user ID
   * @returns Promise<string> - Welcome message
   */
  private async handleStartCommand(userId: string): Promise<string> {
    // Create user session if it doesn't exist
    const info = await this.application.getUserInfo(userId);
    // const session = await this.application.startSession(userId);

    // Get user's current balance and active session info
    const activeSession = info?.conversation ? '–∞–∫—Ç–∏–≤–Ω–∞—è' : '–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö';

    return `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PsychoBot! üåø\n\n
–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–∞—à–µ –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ —á–µ—Ä–µ–∑ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏–µ –±–µ—Å–µ–¥—ã. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å:\n
- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
- –†–∞–∑–≤–∏—Ç–∏–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å–æ–≤–ª–∞–¥–∞–Ω–∏—è
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ö–Ω–∏–∫
- –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n
üí´ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${info?.user?.balance} –∫—Ä–µ–¥–∏—Ç(–æ–≤)
üïí –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏: ${activeSession}\n
üìù –ö–∞–∂–¥–∞—è —Å–µ—Å—Å–∏—è –¥–ª–∏—Ç—Å—è 30 –º–∏–Ω—É—Ç –∏ —Å—Ç–æ–∏—Ç 1 –∫—Ä–µ–¥–∏—Ç
‚≠êÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /buy —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å (150 –∑–≤—ë–∑–¥ = 1 –∫—Ä–µ–¥–∏—Ç)\n
–ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ –ø–µ—á–∞—Ç–∞—Ç—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞—à—É –±–µ—Å–µ–¥—É. –í–∞—à–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ - –º–æ–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã.\n
–ù–∞–ø–∏—à–∏—Ç–µ /help –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.`;
  }

  /**
   * Handles the /help command
   * @returns Promise<string> - Help message
   */
  private async handleHelpCommand(): Promise<string> {
    return `*–ü–æ–º–æ—â—å PsychoBot* üìö\n
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
- /start - –ù–∞—á–∞—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é —Ç–µ—Ä–∞–ø–∏–∏
- /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏
- /info - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞—Ç—É—Å —Ç–µ—Ä–∞–ø–∏–∏
- /buy - –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç–æ–≤ (150 –∑–≤—ë–∑–¥ = 1 –∫—Ä–µ–¥–∏—Ç)
- /cancel - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
- /feedback - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /feedback –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
- /resources - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è\n
–î–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –∫—Ä–∏–∑–∏—Å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–æ–º–æ—â–∏ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ.`;
  }

  /**
   * Handles the /info command
   * @param userId - The Telegram user ID
   * @returns Promise<string> - Info message about user's current status
   */
  private async handleInfoCommand(userId: string): Promise<string> {
    try {
      // Retrieve user's conversation and plan information
      const userInfo = await this.application.getUserInfo(userId);

      if (!userInfo || !userInfo.conversation) {
        return '–£ –º–µ–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π —Å –≤–∞–º–∏. –ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.';
      }

      // Format session information
      let response = '*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–æ–π —Å–µ—Å—Å–∏–∏* üìä\n\n';

      // Conversation state
      // response += `*–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ*: ${this.formatConversationState(userInfo.conversation.state)}\n\n`;

      // Session statistics
      response += '*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏*:\n';
      response += `- –û–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: ${userInfo.stats.messageCount}\n`;
      response += `- –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: ${this.formatDuration(userInfo.stats.sessionDuration)}\n`;

      // Current plan information
      if (userInfo.plan) {
        response += '\n*–¢–µ–∫—É—â–∏–π —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω*:\n';
        response += `- –û–±–ª–∞—Å—Ç—å —Ñ–æ–∫—É—Å–∞: ${userInfo.plan.currentVersion?.content.focus}\n`;
      }

      response += `*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ*:\n`;
      response += `- –ë–∞–ª–∞–Ω—Å: ${userInfo.user?.balance} –∫—Ä–µ–¥–∏—Ç(–æ–≤)\n`;

      response += '\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –Ω–∞—à—É –±–µ—Å–µ–¥—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ.';

      return response;
    } catch (error) {
      console.error(`Error retrieving user info for ${userId}:`, error);
      return '–£ –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–π —Å–µ—Å—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
  }

  /**
   * Handles the /cancel command
   * @param userId - The Telegram user ID
   * @returns Promise<string> - Confirmation message
   */
  private async handleCancelCommand(userId: string): Promise<string> {
    try {
      // Reset current conversation state
      await this.application.resetConversationState(userId);

      return '–Ø —Å–±—Ä–æ—Å–∏–ª —Ç–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.';
    } catch (error) {
      console.error(`Error canceling conversation for ${userId}:`, error);
      return '–£ –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–±—Ä–æ—Å–æ–º –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
  }

  /**
   * Formats conversation state for display
   * @param state - The conversation state enum value
   * @returns string - Readable state description
   */
  private formatConversationState(state: ConversationState): string {
    switch (state) {
      case ConversationState.INFO_GATHERING:
        return '–ù–∞—á–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞';
      case ConversationState.ACTIVE_GUIDANCE:
        return '–ê–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä';
      case ConversationState.PLAN_REVISION:
        return '–ü–µ—Ä–µ—Å–º–æ—Ç—Ä –ø–ª–∞–Ω–∞';
      case ConversationState.EMERGENCY_INTERVENTION:
        return '–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ';
      case ConversationState.SESSION_CLOSING:
        return '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏';
      default:
        return '–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã';
    }
  }

  /**
   * Formats duration in milliseconds to readable format
   * @param durationMs - Duration in milliseconds
   * @returns string - Formatted duration string
   */
  private formatDuration(durationMs: number): string {
    const seconds = Math.floor(durationMs / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);

    if (days > 0) {
      return `${days} ${this.pluralize(days, '–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π')} ${hours % 24} ${this.pluralize(hours % 24, '—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤')}`;
    } else if (hours > 0) {
      return `${hours} ${this.pluralize(hours, '—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤')} ${minutes % 60} ${this.pluralize(minutes % 60, '–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç')}`;
    } else if (minutes > 0) {
      return `${minutes} ${this.pluralize(minutes, '–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç')} ${seconds % 60} ${this.pluralize(seconds % 60, '—Å–µ–∫—É–Ω–¥–∞', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥')}`;
    } else {
      return `${seconds} ${this.pluralize(seconds, '—Å–µ–∫—É–Ω–¥–∞', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥')}`;
    }
  }

  /**
   * Helper function for Russian pluralization
   */
  private pluralize(number: number, one: string, few: string, many: string): string {
    const mod10 = number % 10;
    const mod100 = number % 100;

    if (mod10 === 1 && mod100 !== 11) {
      return one;
    }
    if ([2, 3, 4].includes(mod10) && ![12, 13, 14].includes(mod100)) {
      return few;
    }
    return many;
  }
}
