import { Telegraf, session } from 'telegraf';
import { config } from '../config';
import { ConversationState, UserSession } from '../../domain/entities/user-session';
import { UserSessionRepository } from '../../domain/repositories/user-session.repository';
import { AzureOpenAIService } from '../llm/azure-openai.service';

export class TelegramBotService {
  private bot: Telegraf;
  private sessionRepository: UserSessionRepository;
  private azureOpenAIService: AzureOpenAIService;

  constructor() {
    this.bot = new Telegraf(config.telegramBot.token);
    this.sessionRepository = new UserSessionRepository();
    this.azureOpenAIService = new AzureOpenAIService();

    this.setupMiddleware();
    this.setupCommands();
    this.setupMessageHandlers();
  }

  /**
   * Set up middleware for the bot
   */
  private setupMiddleware(): void {
    // Add middleware to log incoming messages
    this.bot.use(async (ctx, next) => {
      const userId = ctx.from?.id.toString();
      if (userId) {
        // console.log(`Received message from user ${userId}: ${ctx.message?.text}`);
      }
      await next();
    });
  }

  /**
   * Set up command handlers
   */
  private setupCommands(): void {
    // Start command to initiate the conversation
    this.bot.command('start', async (ctx) => {
      const userId = ctx.from.id.toString();
      const session = this.sessionRepository.getOrCreateSession(userId);
      session.state = ConversationState.WAITING_FOR_PROBLEM;
      this.sessionRepository.saveSession(session);

      await ctx.reply(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏! üëã\n\n' +
          '–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö. ' +
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ, –∏ —è –ø—Ä–æ–≤–µ–¥—É –≤–∞—Å —á–µ—Ä–µ–∑ –ø—Ä–æ—Ü–µ—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏.',
      );
    });

    // Help command to show available commands
    this.bot.command('help', async (ctx) => {
      await ctx.reply(
        '–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏:\n\n' +
          '/start - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä\n' +
          '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏\n' +
          '/reset - –°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä\n\n' +
          '–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.',
      );
    });

    // Reset command to clear the current conversation
    this.bot.command('reset', async (ctx) => {
      const userId = ctx.from.id.toString();
      const session = this.sessionRepository.getOrCreateSession(userId);
      session.reset();
      session.state = ConversationState.WAITING_FOR_PROBLEM;
      this.sessionRepository.saveSession(session);

      await ctx.reply(
        '–í–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä –±—ã–ª —Å–±—Ä–æ—à–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–≤–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.',
      );
    });
  }

  /**
   * Set up message handlers
   */
  private setupMessageHandlers(): void {
    // Handle text messages based on the conversation state
    this.bot.on('text', async (ctx) => {
      const userId = ctx.from.id.toString();
      const messageText = ctx.message.text;
      const session = this.sessionRepository.getOrCreateSession(userId);

      switch (session.state) {
        case ConversationState.IDLE:
        case ConversationState.WAITING_FOR_PROBLEM:
          await this.handleProblemStatement(ctx, session, messageText);
          break;

        case ConversationState.PROCESSING_PROBLEM:
          await ctx.reply(
            '–Ø –≤—Å–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...',
          );
          break;

        case ConversationState.ASKING_QUESTIONS:
          await this.handleQuestionAnswer(ctx, session, messageText);
          break;

        case ConversationState.GENERATING_ANALYSIS:
          await ctx.reply(
            '–Ø —Ñ–æ—Ä–º–∏—Ä—É—é –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...',
          );
          break;

        default:
          await ctx.reply(
            '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –∫–æ–º–∞–Ω–¥–æ–π /reset.',
          );
      }
    });
  }

  /**
   * Handle receiving a problem statement from the user
   */
  private async handleProblemStatement(
    ctx: any,
    session: UserSession,
    problem: string,
  ): Promise<void> {
    await ctx.reply(
      '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å. –Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –ø–æ–º–æ—á—å –≤–∞–º...',
    );

    console.log('problem', problem);

    // Set the problem statement and update state
    session.setProblemStatement(problem);
    this.sessionRepository.saveSession(session);

    try {
      // Process the initial message to get an analyzed problem
      const analyzedProblem = await this.azureOpenAIService.processInitialMessage(problem);
      session.setAnalyzedProblem(analyzedProblem);

      // Generate questions based on the analyzed problem
      const { questions, points } = await this.azureOpenAIService.generateQuestions(
        analyzedProblem,
      );
      session.setQuestions(questions);
      session.setPoints(points);
      this.sessionRepository.saveSession(session);

      // Send the first question to the user
      const firstQuestion = session.getCurrentQuestion();
      if (firstQuestion) {
        await ctx.reply(
          '–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —è —Ö–æ—Ç–µ–ª –±—ã –≥–ª—É–±–∂–µ –∏–∑—É—á–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∞—Å–ø–µ–∫—Ç—ã. ' +
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã —è –º–æ–≥ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é:\n\n' +
            firstQuestion,
        );
      } else {
        await ctx.reply(
          '–ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è. –ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–±—ä—è—Å–Ω–∏—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é –∏–Ω–∞—á–µ?',
        );
        session.reset();
        session.state = ConversationState.WAITING_FOR_PROBLEM;
        this.sessionRepository.saveSession(session);
      }
    } catch (error) {
      console.error('Error processing message:', error);
      await ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –∫–æ–º–∞–Ω–¥–æ–π /reset?',
      );
      session.reset();
      session.state = ConversationState.WAITING_FOR_PROBLEM;
      this.sessionRepository.saveSession(session);
    }
  }

  /**
   * Handle receiving an answer to a question from the user
   */
  private async handleQuestionAnswer(
    ctx: any,
    session: UserSession,
    answer: string,
  ): Promise<void> {
    // Add the answer to the current question
    session.addAnswer(answer);
    this.sessionRepository.saveSession(session);

    // Check if there are more questions or if we should generate the final analysis
    const nextQuestion = session.getCurrentQuestion();

    if (nextQuestion) {
      // If there's another question, send it to the user
      await ctx.reply(nextQuestion);
      console.log('Next question:', nextQuestion);
    } else {
      await ctx.reply(session.getPoints());
      console.log('Points:', session.getPoints());
      // If we've gone through all questions, generate the final analysis
      await ctx.reply(
        '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã. –°–µ–π—á–∞—Å —è –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é —Ç—â–∞—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞...',
      );

      try {
        const finalAnalysis = await this.azureOpenAIService.generateFinalAnalysis(
          session.problemStatement,
          session.questionsAndAnswers,
        );

        session.setFinalAnalysis(finalAnalysis);
        this.sessionRepository.saveSession(session);

        await ctx.reply(finalAnalysis);
        console.log('Final Analysis:', finalAnalysis);
        await ctx.reply(
          '–ù–∞–¥–µ—é—Å—å, —ç—Ç–æ—Ç –∞–Ω–∞–ª–∏–∑ –±—ã–ª –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –≤–∞—Å. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ, ' +
            '–≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /reset –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏.',
        );
      } catch (error) {
        console.error('Error generating final analysis:', error);
        await ctx.reply(
          '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞. –ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–±—Ä–æ—Å–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –∫–æ–º–∞–Ω–¥–æ–π /reset?',
        );
        session.reset();
        this.sessionRepository.saveSession(session);
      }
    }
  }

  /**
   * Launch the bot
   */
  async launch(): Promise<void> {
    try {
      await this.bot.launch();
      console.log('Telegram bot is running...');
    } catch (error) {
      console.error('Failed to launch Telegram bot:', error);
      throw error;
    }
  }

  /**
   * Stop the bot
   */
  stop(): void {
    this.bot.stop();
    console.log('Telegram bot has been stopped.');
  }
}
