import { Telegraf } from 'telegraf';
import { config } from '../config';
import { ConversationState, UserSession } from '../../domain/entities/user-session';
import { UserSessionRepository } from '../../domain/repositories/user-session.repository';
import { AzureOpenAIService, ConversationStepType } from '../llm/azure-openai.service';

export class TelegramBotService {
  private bot: Telegraf;
  private sessionRepository: UserSessionRepository;
  private azureOpenAIService: AzureOpenAIService;

  constructor() {
    this.bot = new Telegraf(config.telegramBot.token);
    this.sessionRepository = new UserSessionRepository();
    this.azureOpenAIService = new AzureOpenAIService();

    this.setupMiddleware();
    this.setupCommands();
    this.setupMessageHandlers();
  }

  private setupMiddleware(): void {
    this.bot.use(async (ctx, next) => {
      const userId = ctx.from?.id.toString();
      if (userId) {
        // console.log(`Received message from user ${userId}: ${ctx.message?.text}`);
      }
      await next();
    });
  }

  private setupCommands(): void {
    this.bot.command('start', async (ctx) => {
      const userId = ctx.from.id.toString();
      const session = this.sessionRepository.getOrCreateSession(userId);
      session.reset();
      session.state = ConversationState.WAITING_FOR_PROBLEM;
      this.sessionRepository.saveSession(session);

      await ctx.reply(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏! üëã\n\n' +
          '–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö. ' +
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ, –∏ —è –ø—Ä–æ–≤–µ–¥—É –≤–∞—Å —á–µ—Ä–µ–∑ –ø—Ä–æ—Ü–µ—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏.',
      );
    });

    this.bot.command('help', async (ctx) => {
      await ctx.reply(
        '–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏:\n\n' +
          '/start - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä\n' +
          '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏\n' +
          '/reset - –°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä\n\n' +
          '–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.',
      );
    });

    this.bot.command('reset', async (ctx) => {
      const userId = ctx.from.id.toString();
      const session = this.sessionRepository.getOrCreateSession(userId);
      session.reset();
      session.state = ConversationState.WAITING_FOR_PROBLEM;
      this.sessionRepository.saveSession(session);

      await ctx.reply(
        '–í–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä –±—ã–ª —Å–±—Ä–æ—à–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–≤–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.',
      );
    });
  }

  private setupMessageHandlers(): void {
    this.bot.on('text', async (ctx) => {
      const userId = ctx.from.id.toString();
      const messageText = ctx.message.text;
      const session = this.sessionRepository.getOrCreateSession(userId);

      switch (session.state) {
        case ConversationState.IDLE:
        case ConversationState.WAITING_FOR_PROBLEM:
          await this.handleProblemStatement(ctx, session, messageText);
          break;

        case ConversationState.PROCESSING_PROBLEM:
          await this.processInitialProblem(ctx, session);
          break;

        case ConversationState.GENERATING_CONVERSATION_PLAN:
          await this.generateConversationPlan(ctx, session);
          break;

        case ConversationState.EXPLORING_QUESTIONS:
          await this.handleQuestionExplorationAnswer(ctx, session, messageText);
          break;

        case ConversationState.GENERATING_ANALYSIS:
          await this.generateFinalAnalysis(ctx, session);
          break;

        default:
          await ctx.reply(
            '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –∫–æ–º–∞–Ω–¥–æ–π /reset.',
          );
      }
    });
  }

  private async handleProblemStatement(
    ctx: any,
    session: UserSession,
    problem: string,
  ): Promise<void> {
    session.setProblemStatement(problem);
    await ctx.reply('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É...');
    this.sessionRepository.saveSession(session);

    await this.processInitialProblem(ctx, session);
  }

  private async processInitialProblem(ctx: any, session: UserSession): Promise<void> {
    try {
      const analyzedProblem = await this.azureOpenAIService.processInitialMessage(
        session.problemStatement,
      );
      session.setAnalyzedProblem(analyzedProblem);
      this.sessionRepository.saveSession(session);

      await ctx.reply('–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ–∑–¥–∞—é –ø–ª–∞–Ω –Ω–∞—à–µ–π –±–µ—Å–µ–¥—ã...');
      await this.generateConversationPlan(ctx, session);
    } catch (error) {
      console.error('Error processing message:', error);
      await ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –∫–æ–º–∞–Ω–¥–æ–π /reset?',
      );
      session.reset();
      session.state = ConversationState.WAITING_FOR_PROBLEM;
      this.sessionRepository.saveSession(session);
    }
  }

  private async generateConversationPlan(ctx: any, session: UserSession): Promise<void> {
    try {
      const conversationPlan = await this.azureOpenAIService.generateConversationPlan(
        session.analyzedProblem || session.problemStatement,
      );

      console.log(conversationPlan);

      session.setConversationPlan(conversationPlan);
      this.sessionRepository.saveSession(session);

      // Show a summary of the conversation plan
      // const mainTopics = conversationPlan.mainTopics
      //   .map((topic, index) => `${index + 1}. ${topic.text}`)
      //   .join('\n');

      // await ctx.reply(
      //   `–Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –ø–ª–∞–Ω –Ω–∞—à–µ–π –±–µ—Å–µ–¥—ã —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è:\n\n${mainTopics}\n\n–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –æ–±—Å—É–∂–¥–µ–Ω–∏–µ.`,
      // );

      // Start exploring questions
      await this.exploreCurrentQuestion(ctx, session);
    } catch (error) {
      console.error('Error generating conversation plan:', error);
      await ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞ –±–µ—Å–µ–¥—ã. –ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –∫–æ–º–∞–Ω–¥–æ–π /reset?',
      );
      session.reset();
      session.state = ConversationState.WAITING_FOR_PROBLEM;
      this.sessionRepository.saveSession(session);
    }
  }

  private async exploreCurrentQuestion(ctx: any, session: UserSession): Promise<void> {
    try {
      const result = await this.azureOpenAIService.exploreQuestions(
        session.problemStatement,
        session.conversationPlan!,
        session.previousAnswers,
        session.conversationHistory,
        session.questionProgress,
      );

      // Update session with exploration results
      session.updateQuestionProgress(result.questionsProgress);
      session.setSuggestedNextQuestions(result.suggestedNextQuestions);

      // Send the response to the user
      await ctx.reply(result.response);

      // Add to conversation history
      session.conversationHistory.push({ role: 'assistant', content: result.response });

      // If there are no more questions to explore, move to final analysis
      if (!result.shouldContinue) {
        await ctx.reply('–ú—ã –æ–±—Å—É–¥–∏–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–µ–º—ã. –ì–æ—Ç–æ–≤–ª—é —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑...');
        await this.generateFinalAnalysis(ctx, session);
      }

      this.sessionRepository.saveSession(session);
    } catch (error) {
      console.error('Error exploring questions:', error);
      await ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /reset.',
      );
      session.reset();
      this.sessionRepository.saveSession(session);
    }
  }

  private async handleQuestionExplorationAnswer(
    ctx: any,
    session: UserSession,
    answer: string,
  ): Promise<void> {
    // Add the user's answer to conversation history
    session.conversationHistory.push({ role: 'user', content: answer });

    // Update the answer in the session
    if (session.suggestedNextQuestions.length > 0) {
      session.previousAnswers[session.suggestedNextQuestions[0].id] = answer;
      session.questionsAndAnswers.push({
        question: session.suggestedNextQuestions[0].text,
        answer,
      });
    }

    this.sessionRepository.saveSession(session);

    // Continue exploration if the conversation is not completed
    if (!session.conversationCompleted) {
      await this.exploreCurrentQuestion(ctx, session);
    }
  }

  private async generateFinalAnalysis(ctx: any, session: UserSession): Promise<void> {
    try {
      const finalAnalysis = await this.azureOpenAIService.generateFinalAnalysis(
        session.problemStatement,
        session.questionsAndAnswers,
      );

      session.setFinalAnalysis(finalAnalysis);
      this.sessionRepository.saveSession(session);

      await ctx.reply(finalAnalysis);

      await ctx.reply(
        '–ù–∞–¥–µ—é—Å—å, —ç—Ç–æ—Ç –∞–Ω–∞–ª–∏–∑ –±—ã–ª –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –≤–∞—Å. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ, ' +
          '–≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏.',
      );

      session.reset();
      session.state = ConversationState.WAITING_FOR_PROBLEM;
      this.sessionRepository.saveSession(session);
    } catch (error) {
      console.error('Error generating final analysis:', error);
      await ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞. –ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–±—Ä–æ—Å–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –∫–æ–º–∞–Ω–¥–æ–π /reset?',
      );
      session.reset();
      this.sessionRepository.saveSession(session);
    }
  }

  async launch(): Promise<void> {
    try {
      await this.bot.launch();
      console.log('Telegram bot is running...');
    } catch (error) {
      console.error('Failed to launch Telegram bot:', error);
      throw error;
    }
  }

  stop(): void {
    this.bot.stop();
    console.log('Telegram bot has been stopped.');
  }
}
