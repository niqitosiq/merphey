generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ConversationState {
  INFO_GATHERING
  ACTIVE_GUIDANCE
  PLAN_REVISION
  EMERGENCY_INTERVENTION
  SESSION_CLOSING
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model User {
  id               String            @id @default(uuid())
  conversations    Conversation[]
  therapeuticPlans TherapeuticPlan[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Conversation {
  id              String            @id @default(uuid())
  state           ConversationState @default(INFO_GATHERING)
  userId          String
  user            User              @relation(fields: [userId], references: [id])
  messages        Message[]
  riskAssessments RiskAssessment[]
  currentPlanId   String?
  therapeuticPlan TherapeuticPlan?  @relation(fields: [currentPlanId], references: [id])
  contextVector   String? // Stored as JSON or vector type
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([userId])
}

model Message {
  id             String       @id @default(uuid())
  content        String
  role           String // 'user' or 'assistant'
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  metadata       Json? // Store guidance metadata
  createdAt      DateTime     @default(now())

  @@index([conversationId])
}

model RiskAssessment {
  id             String       @id @default(uuid())
  level          RiskLevel
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  factors        String[]
  score          Float
  createdAt      DateTime     @default(now())

  @@index([conversationId])
}

model TherapeuticPlan {
  id               String         @id @default(uuid())
  userId           String
  user             User           @relation(fields: [userId], references: [id])
  versions         PlanVersion[]  @relation("PlanVersions")
  currentVersion   PlanVersion?   @relation("CurrentVersion", fields: [currentVersionId], references: [id])
  currentVersionId String?        @unique // Add @unique here
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  conversations    Conversation[]

  @@index([userId])
}

model PlanVersion {
  id                String           @id @default(uuid())
  version           Int
  planId            String
  therapeuticPlan   TherapeuticPlan  @relation("PlanVersions", fields: [planId], references: [id])
  previousVersion   PlanVersion?     @relation("VersionChain", fields: [previousVersionId], references: [id])
  previousVersionId String?
  nextVersions      PlanVersion[]    @relation("VersionChain")
  content           Json
  validationScore   Float?
  createdAt         DateTime         @default(now())
  currentOfPlan     TherapeuticPlan? @relation("CurrentVersion")

  @@index([planId])
}
